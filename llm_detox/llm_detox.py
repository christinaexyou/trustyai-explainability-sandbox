# -*- coding: utf-8 -*-
"""llm_detox.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11m_Dcju5CnQc7NmN6Y1YsAUtqVnaVLIK
"""

from transformers import BartForConditionalGeneration, BartTokenizer, Trainer, TrainingArguments
from datasets import load_dataset

base_model = BartForConditionalGeneration.from_pretrained("facebook/bart-large", forced_bos_token_id=0)
tokenizer = BartTokenizer.from_pretrained("facebook/bart-large")

datasets = load_dataset('jigsaw_toxicity_pred', data_dir='/path/to/jigsaw-toxic-comment-classification-challenge')
toxic_datasets = datasets.filter(lambda x: int(x['toxic']) == 1)
print(toxic_datasets['train'][1])

def tokenize_function(examples):
    return tokenizer(examples["comment_text"], max_length=1024, truncation=True)

td_columns = ["comment_text", 'toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']
tokenized_datasets = toxic_datasets.map(tokenize_function, batched=True, num_proc=4, remove_columns=td_columns)

print(tokenized_datasets["train"][1])

# block_size = tokenizer.model_max_length
block_size = 128

def group_texts(examples):
    # Concatenate all texts.
    concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}
    total_length = len(concatenated_examples[list(examples.keys())[0]])
    # We drop the small remainder, we could add padding if the model supported it instead of this drop, you can
        # customize this part to your needs.
    total_length = (total_length // block_size) * block_size
    # Split by chunks of max_len.
    result = {
        k: [t[i : i + block_size] for i in range(0, total_length, block_size)]
        for k, t in concatenated_examples.items()
    }
    result["labels"] = result["input_ids"].copy()
    return result

lm_datasets = tokenized_datasets.map(
    group_texts,
    batched=True,
    batch_size=100,
    num_proc=4,
)

print(lm_datasets['train'])
gminus_model = BartForConditionalGeneration.from_pretrained("facebook/bart-large", forced_bos_token_id=0)

training_args = TrainingArguments(
    "gminus-bart-large",
    evaluation_strategy = "epoch",
    learning_rate=2e-5,
    weight_decay=0.01
)

trainer = Trainer(
    model=gminus_model,
    args=training_args,
    train_dataset=lm_datasets["train"],
    eval_dataset=lm_datasets["test"],
)

print('now training G- model')
trainer.train()

import math
eval_results = trainer.evaluate()
print(f"Perplexity: {math.exp(eval_results['eval_loss']):.2f}")

# train gplus model
nontoxic_datasets = datasets.filter(lambda x: int(x['toxic']) == 0)
print(nontoxic_datasets['train'][1])

nontoxic_tokenized_datasets = nontoxic_datasets.map(tokenize_function, batched=True, num_proc=4, remove_columns=td_columns)

print(nontoxic_tokenized_datasets["train"][1])


nontoxic_lm_datasets = nontoxic_tokenized_datasets.map(
    group_texts,
    batched=True,
    batch_size=100,
    num_proc=4,
)

print(nontoxic_lm_datasets['train'])
gplus_model = BartForConditionalGeneration.from_pretrained("facebook/bart-large", forced_bos_token_id=0)

nt_training_args = TrainingArguments(
    "gplus-bart-large",
    evaluation_strategy = "epoch",
    learning_rate=2e-5,
    weight_decay=0.01
)

nt_trainer = Trainer(
    model=gplus_model,
    args=nt_training_args,
    train_dataset=nontoxic_lm_datasets["train"],
    eval_dataset=nontoxic_lm_datasets["test"],
)

print('now training G+ model')
nt_trainer.train()

nt_eval_results = nt_trainer.evaluate()
print(f"Perplexity: {math.exp(nt_eval_results['eval_loss']):.2f}")



